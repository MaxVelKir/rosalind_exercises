defmodule HAMM do

  @s1 "ATTAACAATGTCAGAGGCTCGCGCACAAATTTGGATTCGCTCGGGTAAACATACCAGGTTATCTATTTACATGACAATGCTTCACGGACGGGAATCGTACGTCTGCATCGCGTCAGTTCCGTCCAAACAGTTCTTGCAGTAGCTATCCCATACGTAAGACCTCTTGGCCGCGGTTGCACTAAATTGGCTAGTCACGATCGAAATCTAGTAGTATACCTAGATGATCCCTCGTTAAGTGTTAATTCGTGGGGACTGACACCGGCGTCCTCGTGCCCTACTTTGACGGTCATAACGGTCGCGGGCGCTGGCCGAACCGAGTTGGACGCGCCACCCCAGTAGAAACCTCAGCAGTCAGTGTATCTCCTTTACATTATCTCAGCCCTTACTCGTTGGTTTCCGTATTCATCACTTGGATGGACATCTTCAAGGGAGTATGTGGGCCAGTTGGAGCCTAAACCGAGCGGACTACCGCTCCATTCCGTATGAAGAATTTTTATTCATTATCTCGTTACTTGGCCTGATTGATATGGCTCTTATTGCCAGTGGCTGACAGTCAGCAACTTGTAACGAACAATACAACGAGACTAGGGTACCGTTGGTCAGCTTGCGGTGCGGCGCTTGCTCCAGCGTCGGGCTATAGGTTCTCACCTGACCGCATATATCCACCGTCCGATGGATGGAGCGGAAGTATATTGATTTTCAATCGCATAGGGCTACGCTGCCGATCTTGCACGCAATTGAACGCTGAAACACGTACTTCGAGACCAAAATATCTAAGTGGCCCGAACGATGACGAAGTTCCCTTGGCATCTTGGGTCAGGTTTTCCACTGGTGGATGTTTCCAAACTTGCCGTAGCACCGAGTTTGCGACGCTCCTGGTCACGGTGCCGTGTTCGTCCATGGCAATCTACAACTGGTATCGCGTCAAATCGTCGACGAGCGAGCGCGGCTAGCCTCCTTATCCCCCCTCTCGAGCGTGC"
  @s2 "AGTGCAGCTTCCTGGCGCTCGCGACGAGTTACGTATGTGGTTGCCCTTAATTACTTGGTTACCTTTTAATCTGGAGCCGCATCCCTTGCGGGGACCCTGCCCTTTCATAATTGGCCGAGCGTGTATGCACTTATTAGGGGAAGTGTACCCACAGGCCACTGGCTTTGCCACGGTAGCTGCAAACAGTACATTTTCACTACAAAGTCGGTAGTCAAAATAAGCGTAACAGCGCCAACAATTACTCTGCGACAGTAAACGTCCATGACCACATGTCTTGTTGCAACAGGGTTAAGACTCGAGCTCGCTGCGTGAGCTCCGAGAAACTGACTTCAACAGTTGCATTATCAACCTGCAGAGTTACTCTGTCAGAGCTTATCTCCCCTCTCTAAGAGCTCTCCGTATTGTAGATGCCGTCGCGTCTCCTCGTAAAGGCGTCACCGGCAGTGTGATATTAGTCTGTGAAGTAAACGACTTCATTGCCCAACAGATTCAGTGGTTCACTTTGTCGAGACGGGGCCGAATTGTGTACGGGCCATGTCCCACAGGCCGGAATTCAGCGACTTCTAACCAACACCTCCCGTTCAGTCGGTGTTCGTTCCTCAGGTTCCCCTGCGGGAGCTACTACGGCGTTTTTGTCGTCTGCACAATCCAACGTCTCCTATTCACTAGCCACAGGCTGGGATGCTAGTCTAACTCCTTCCAATCGCTTCCCCTTTTACAACACATATTTTAGTCTCATGACCGACGCAAGGCCTACTAAGCGGAAATATTGTGTAACACAACCAAGCACGGAGACCGAACCCCTTTTAGTTTTTTTAAGGAAATAGAAGCGTGAAACTCTCCCAGATCGACGTGCTACGACAATTGGAGAGAGCAGATTCAGGGTCCCCAGCCCAACACTGTCTGGTCGCAAGTCTTCTCACATTAACTTGACTACAGCAGAGACTCAGTTGGGTCCGTAGCGGCACCCGCTAGATCGG
"
  @length String.length(@s1)

  def main(s1 \\ @s1, s2 \\ @s2) do

    s1 = String.split(s1, "") |> Stream.filter(fn x -> x != "" end) |> Enum.reduce({}, fn x, acc -> Tuple.append(acc, x) end)
    s2 = String.split(s2, "") |> Stream.filter(fn x -> x != "" end) |> Enum.reduce({}, fn x, acc -> Tuple.append(acc, x) end)

    loop(s1, s2, 0, 0)

  end

  def loop(s1, s2, n, result) do

    if n == @length, do: result,
  else: if elem(s1, n) != elem(s2, n), do: loop(s1, s2, n + 1, result + 1),
else: loop(s1, s2, n + 1, result)

  end

end
